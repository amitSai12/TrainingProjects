body {
    font-family: Arial, sans-serif;
	background-image: linear-gradient(to right, #d16ba5, #c777b9, #ba83ca, #aa8fd8, #9a9ae1, #8aa7ec, #79b3f4, #69bff8, #52cffe, #41dfff, #46eefa, #5ffbf1);
	margin: 0;
    padding: 0;
}

   
 Add a class to control the overlay opacity */
body.loaded::before {
    opacity: 0; /* Fully transparent to reveal the background */
}
.logo {
	
    display: flex;
    align-items: center;
    padding: 10px 20px;
    color: white;
    margin-bottom: 20px; /* Adjust margin to create space below the logo */
   
}

/* Style the logo image */
.logo img {
    width: 40px; /* Adjust the width as needed */
    height: 40px; /* Adjust the height as needed */
    margin-right: 10px; /* Add some spacing between the image and text */
}

/* Style the logo text */
.logo-text {
    font-size: 14px; /* Adjust the font size as needed */
    font-weight: bold; /* Make the text bold */
}

.menu {
	 position: fixed;
    display: flex;
    justify-content: flex-end; /* Move menu to the right top corner */
    padding: 10px 20px; /* Adjust padding as needed */
    border-radius: 31px;
   margin-left: 565px;
}

.menu a {
    text-decoration: none; /* Remove the default underline */
    color: white;
    font-weight: bold;
    padding: 10px 20px;
    border-radius: 5px;
    position: relative; /* Add relative positioning */
    transition: color 0.3s;/* Add transitions for color and background-color */
    font-size: 14px;
}

.menu a-text {
    font-size: 6px; /* Adjust the font size as needed */
    font-weight: bold;
}

.menu a::before {
    content: ""; /* Create an empty pseudo-element */
    position: absolute; /* Set absolute positioning */
    bottom: 0; /* Position it at the bottom */
    left: 10%; /* Align it with the left edge of the link */
    width: 0%; /* Initially, the width is 0% */
    height: 2px; /* Set the height of the underline */
   background-image: linear-gradient(to right, #1b009f, #131d93, #1b2a84, #273273, #323961, #353b57, #393d4d, #3d3e42, #3c3c3f, #3a3a3c, #39393a, #373737); /* Color of the underline */
    transition: width 0.5s ease; /* Add a transition for width */
}

.menu a:hover {
 color:rgb(255, 255, 255);
	
}

/* with gratitude to http://lea.verou.me/2012/02/simpler-css-typing-animation-with-the-ch-unit/*/

$width: 50;
$text: #000;
$bg: #fff;
$cursor-speed: 35; // characters per second
$duration: $width / $cursor-speed * 1s;
$cursor-duration: $duration / $width;
$cursor-wait-duration: 0.8s;
$cursor-wait-iteration: 2;
$paragraph-lengths: (35, 181, 120, 215);

@keyframes letters {
  // animation, go from left to right
  from {
      left: 0;
  }
  to {
      left: $width + ch;
  }
}

@keyframes lines {
    // go from top to bottom
    from {
        top: 0;
    }
    to {
        top: 100%;
    }
}

@keyframes cursor-type { 
  50% { 
    border-color: #000; 
  } 
}

@keyframes cursor-wait { 
  0% { 
    box-shadow: inset 2px 0 0 0 rgba(0, 0, 0, 0); 
  } 
  1% { 
    box-shadow: inset 2px 0 0 0 rgba(0, 0, 0, 1); 
  }
  40% { 
    box-shadow: inset 2px 0 0 0 rgba(0, 0, 0, 1); 
  }
}

.test {
  display: none;
  animation-name: cursor-wait;
  animation-duration: $cursor-wait-duration;
  animation-timing-function: ease;
  animation-iteration-count: 2;
  animation-fill-mode: backward;
  animation-delay:0s; 
  padding-left: 10px;
}

.type {
    position: relative;
    font-family: Consolas, Monaco, monospace; // must be monospace
    width: $width + ch;
    line-height: 1.2;
    word-break: break-all; // this has to be a predictable height and width to work
    overflow: hidden;

      // falls back to displaying static text
    @supports (width: 1ch) {
        &:before,
        &:after {
            box-sizing: border-box;
            content: '';
            position: absolute;
            z-index: 1;
            display: block;
            height: 1.2em;
            width: 100%;
            background-color: $bg; 
        }

        &:before {
            // cursor and first line mask
            border-left: 2px solid transparent;
            top: 100%;
            animation-name: letters, lines, cursor-type, cursor-wait;
            animation-fill-mode: both, both, both, backwards;
        }

        &:after {
            // mask for subsequent lines
            content: '';
            height: 100%;
            top: 100%;
            left: 0;
            margin-top: 1.2em;
        }
    }
}


$iterations: 1;
$total-delay: 0s;

@each $length in $paragraph-lengths {
  $this-characters: $length;
  $this-lines: ceil($this-characters / $width); 
  $this-selector: '.type';
  $this-delay: $total-delay;
  $this-type-delay: $this-delay + $cursor-wait-duration * $cursor-wait-iteration; 

  @for $i from 1 to $iterations {
    $this-selector: $this-selector + ' + .type';
  }
  
  #{$this-selector} {
     &:before {
       animation-duration: $duration, ($duration * $this-lines), $cursor-duration, $cursor-wait-duration;
       animation-timing-function: steps($width, end), steps($this-lines, end), step-end, ease-out;
       animation-iteration-count: $this-lines, 1, $this-characters, $cursor-wait-iteration;  
       animation-delay: $this-type-delay, $this-type-delay, $this-type-delay, $this-delay; 
    }

    &:after {
      animation: lines ($duration * $this-lines) steps($this-lines, end) 1;
      animation-fill-mode: both;
      animation-delay: $this-type-delay;
    }
  }
  $total-delay: $this-type-delay + ($this-characters / $cursor-speed);
  $iterations: $iterations + 1;  
}


