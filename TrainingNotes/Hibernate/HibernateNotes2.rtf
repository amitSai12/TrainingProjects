{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\colortbl ;\red0\green0\blue255;}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\b\f0\fs40\lang9 Hibernate Steps :\b0\fs22\par
Hibernate used to implement data-based oriented applications. It is a ORM tool, which maps the java classes to backend database tables. \par
\par
\b\fs32 Steps to Create Hibernate Application : \b0\par
\b\i\fs22 Create a Project and add the relevant dependencies\par
\b0\i0 1) \b\fs24 Create\b0\fs20  \ul\fs22 hibernate.cfg.xml file \ulnone for loading configuration details, as it contains some mandetory properties and some optional properties. \par
    \ul\b\fs28 Dialect\b0\fs22  \ulnone :  Dialect is a class \b that acts as a bridge between Java JDBC types and SQL types\b0 , \tab which contains the \b mapping\b0  between \b java language data type \b0 and \b database datatype\b0 . \tab Dialect allows Hibernate to generate SQL optimized for a particular relational \tab database.\par
\b\fs24 syntax for dialect \b0\fs22 : (hbm.xml file)\par
  <property name="hibernate.dialect">org.hibernate.dialect.MySQLDialect</property>\par
\i - \b It is predefined as changes according to db we are using\i0 . \par
\b0  <property name="hibernate.connection.driver_class">com.mysql.jdbc.Driver</property>\par
        <property name="hibernate.connection.password">Amitsai@123</property>\par
        <property name="hibernate.connection.url">\tab\tab jdbc:mysql://localhost:3306/infinite_august23</property>\par
        <property name="hibernate.connection.username">root</property>\par
\par
\b\fs24 Now, optional properties\par
\b0\fs22 hibernate.connection.pool_size\par
- Limits the number of connections waiting in the Hibernate database connection pool.\\\par
\par
<property name="show_sql">true</property>\par
- Hibernate has build-in a function to enable the logging of all the generated SQL statements to the console. You can enable it by add a \ldblquote show_sql\rdblquote  property in the Hibernate configuration file.\par
\par
2)\b\fs28  Mapping\b0\fs20  \fs22\par
    Map the POJO class to hbm.xml\par
\tab  Example if you have Agent.java file -  Agent.hbm.xml file to be generated. \par
\b keys to remember \b0 : Please specify naming conventsions same as database fields, after generating if you need make proper modifications. \par
\b\fs28 Agent.hbm.xml file :\b0\fs22\par
<?xml version="1.0" encoding="UTF-8" standalone="no"?>\par
<!-- Generated 04-Oct-2023, 9:35:50 am by Hibernate Tools 3.6.2.Final --><!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN" "{{\field{\*\fldinst{HYPERLINK http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd }}{\fldrslt{http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd\ul0\cf0}}}}\f0\fs22 ">\par
<hibernate-mapping auto-import="true" default-access="property" default-cascade="none" default-lazy="true">\par
    <class dynamic-insert="false" dynamic-update="false" mutable="true" name="com.java.jsf.Employ" optimistic-lock="version" polymorphism="implicit" select-before-update="false" table="EMPLOY">\par
        <id name="empno" type="int">\par
            <column name="EMPNO"/>\par
            <generator class="assigned"/>\par
        </id>\par
        <property generated="never" lazy="false" name="gender" optimistic-lock="true" unique="false">\par
            <column name="GENDER"/>\par
            <type name="org.hibernate.type.EnumType">\par
                <param name="enumClass">com.java.jsf.Gender</param>\par
                <param name="type">12</param>\par
            </type>\par
        </property>\par
        <property generated="never" lazy="false" name="basic" optimistic-lock="true" type="double" unique="false">\par
            <column name="BASIC"/>\par
        </property>\par
    </class>\par
</hibernate-mapping>\par
\par
\b\fs28 What is <id> tag and what are the options in id tag available ???\b0\fs22\par
- The <id> element maps the unique ID attribute in class to the primary key of the database table. \par
- The name attribute of the id element refers to the property in the class and the column attribute refers to the column in the database table. \par
- The type attribute holds the hibernate mapping type, this mapping types will convert from Java to SQL data type.\par
<id name="empno" type="int">\par
            <column name="EMPNO"/>\par
            <generator class="assigned"/>\par
        </id>\par
\par
 <generator class="assigned"/>  : Give as manually\par
 <generator class="sequence"/> : Generates automatically\par
\par
\b\fs28 Types of Generator Classes\par
\b0\fs22 Hibernate provides many predefined generator classes. Some of the important predefined generator classes in hibernate are:\par
assigned\par
foreign\par
hilo\par
identity\par
increment\par
native\par
sequence\par
\par
\b\fs24 1. assigned generator\b0\fs22\par
The assigned generator is the default generator. By default hibernate consider assigned as a generator and assigned is a shortcut name given for the Assigned class. This class returns the same id set by us to the hibernate which in turn store an object with that id in the database.\par
\par
\b\fs24 2. foreign generator\b0\fs22\par
foreign is a  shortcut name given for the ForeignGenerator class. The ForeignGenerator is only suitable for one-one relationships. It returns the id of the parent object as the id for the child object.\par
\par
\b\fs24 3. increment generator\b0\fs22\par
An increment is a shortcut name given for the IncrementGenerator class. The IncrementGenerator class reads the max value of the existing ID in the database table and then increments it by one and returns the ID value to hibernate.\par
\par
\b\fs24 4. sequence generator\b0\fs22\par
sequence is a shortcut name given for the SequenceGenerator class. It reads the next value of a database sequence and then returns that value as id to the hibernate.\par
\par
3) \b\fs28 How to connect to Database and Retrieve Data\par
\b0\fs22\par
\b\fs36 1)  Configuration \b0\fs22 : This interface allows you to load configuration information from \tab\b\fs24 hibernate.cfg.xml file\par
\b0\fs22 Configuration cfg = new AnnotationConfiguration().configure().buildSessionFactory() \par
This statement used to load second level cache information and establish connection from database. This statement recognizes \b hibernate.cfg.xml \b0 file automatically from resources\par
\par
\b\fs36 2) SessionFactory \b0\fs22 : The SessionFactory is a factory of session and client of ConnectionProvider. It holds second level cache (optional) of data. The \b org.hibernate.SessionFactory \b0 interface provides factory method to get the object of Session.\par
But, We cannot make multiple SessionFactory objects, so we are dealing with Single-Ton Design pattern. as\par
static SessionFactory sessionFactory;\par
\tab public static SessionFactory getIntance() \{\par
\tab\tab if (sessionFactory==null) \{\par
\tab\tab\tab sessionFactory= new AnnotationConfiguration().configure().buildSessionFactory();\par
\tab\tab\}\par
\tab\tab return sessionFactory;\par
\tab\}\par
\par
Here, it checks whether sessionFactory object already exists, it maps to the particular object, only first time the object will be created. \par
Single-Ton design pattern says only one single instance to be created for entire project. \par
With SessionFactory, we are completely connected to database.  Now, we need to deal with table.\par
\par
\b\fs36 3) Session \b0\fs22\par
The Session interface is the main tool used to communicate with Hibernate. It provides an API enabling us to \b create\b0 , \b read\b0 , \b update\b0 , and \b delete \b0 persistent objects. The session has a simple lifecycle. We open it, perform some operations, and then close it.\par
You can create a session as\par
Session session = sessionFactory.openSession();\par
// do relevant operations\par
session.close();\par
\par
A Session is used to get \b a physical connection with a database\b0 . The Session object is lightweight and designed to be instantiated each time an interaction is needed with the database. Persistent objects are saved and retrieved through a Session object.\par
Whenver you need to \b interact with table, open the session\b0  and after the operation you need to \b close the session, else it leads to isolation issues. \b0\par
\par
Example : \par
In same method, we need to do query and insert operation, then first after query please close the session object and open new session again, else it leads to isolation.\par
}
 